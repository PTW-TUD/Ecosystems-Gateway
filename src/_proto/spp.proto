/*
Copyright 2021-2022 Stefan Dumss, MIVP TU Wien
*/

syntax = "proto3";

import "google/protobuf/struct.proto";

package eupg.serviceofferingpublisher;

option go_package = "serviceofferingpublisher/pb";

// Create message to publish a Offering with the given information
// At the moment: Primarily tailored for ocean market (and for datasets)
message CreateOfferingRequest{
    // The main information about the asset to publish
    Main main = 2;

    // Additional information regarding the offering
    AdditionalInformation additionalInformation = 3;

    // Symbol (Abbreviation) for the access token that is generated for consuming the asset
    // Important for following access token transactions in the explorer
    string token = 4;

    // Name of the offering which is also used for the token name
    string name = 5;
}

// Update message for an already published Offering
message UpdateOfferingRequest {
    // Decentralised identifier for the already published offering
    // example: did:op:1234
    string did = 1;

    optional Main main = 2;

    optional AdditionalInformation additionalInformation = 3;

    optional string token = 4;

    optional string name = 5;

    // Optional information about the published asset
    // If this Information is set, it is used to publish the offering to the Credential Event Service
    optional PublishInfo publishInfo = 6;

    // Optional indices of the services of the asset that are to be updated
    // If no index is given all services are edited
    repeated int32 index = 7;
}

// Update message for changing the LifecycleState of an already published offering
message UpdateOfferingLifecycleRequest{
    string did = 1;
    LifecycleStates to = 2;
}

// Possible lifecycle states of asset
enum LifecycleStates{
    // Fully functional asset
    // Discoverable in Portal and Ordering allowed
    // Listed under the owner's profile
    ACTIVE = 0;

    // This state indicates that the asset is usually deprecated or outdated
    // Discoverable, but not orderable
    // Not listed under the owner's profile
    END_OF_LIFE = 1;

    // This state indicates that another asset has deprecated the current asset
    // Not discoverable and not orderable
    // Not listed under the owner's profile
    DEPRECATED = 2;

    // Publisher has explicitly revoked access or ownership rights to the asset
    // Not discoverable and not orderable
    REVOKED_BY_PUBLISHER = 3;

    // Users can view the asset and gather information, but they cannot place orders at that moment
    // Discoverable, but not orderable
    // Listed under the owner's profile.
    ORDERING_DISABLED_TEMPORARILY = 4;

    // Not discoverable, but orderable
    // Listed under the owner's profile
    ASSET_UNLISTED = 5;
}

// Publish info used in UpdateOfferingRequest
// Used for additionally publishing Offering to Credential Event Service
message PublishInfo{
    // The source where to find the published offering
    // example: https://www.pontus-x.eu/asset/did:op:ac74139fa102d32f326ccdab3727a95299f1c2b6add9158385439e5b06810833
    string source = 1;

    // The data that is submitted to the credential event service
    // At the moment: Has to be a (Compliance) VC issued by the Gaia-X compliance engine
    string data = 2;
}

// Main metadata information for the asset used in CreateOfferingRequest and UpdateOfferingRequest
message Main{
    // type of the asset
    // Can be either 'dataset' or 'algorithm'
    string type = 1;

    // Name of the entity generating this data
    string author = 3;

    // Short name referencing the license of the asset
    // example: CC-BY, Public Domain
    string licence = 4;

    // !UNUSED!
    // ISO 8601 format preferably with timezone identifiers
    // example: 2000-10-31T01:30:00Z
    optional string dateCreated = 5;

    // Files that contain the data related to the asset
    // At least one file is required
    repeated Files files = 6;

    // Optional keywords or tags used to describe the content of the offering
    repeated string tags = 7;

    // Details of what the resource is. For a dataset, this attribute explains what the data represents and what it can be used for.
    // This information is displayed in the portal
    // Supports markdown
    string description = 8;

    // Optional whitelisted Algorithms than can be used on the asset
    // Only usable if the offering is of type 'compute' and not 'access' (At the moment default='compute')
    repeated Algorithm allowedAlgorithm = 9;
}

// Additional information about the asset used in CreateOfferingRequest and UpdateOfferingRequest
message AdditionalInformation{
    // !UNUSED!
    string description = 1;

    // !UNUSED!
    ServiceSelfDescription serviceSelfDescription = 3;

    // Boolean to indicate if the publisher specifies it's own terms and conditions for consumption of the asset
    bool termsAndConditions = 4;

    // Information in the context of Gaia-X compliance including the link to the Self-Description of the offering (VP)
    gaiaX gaiaXInformation = 5;
}

// Information about a file related to a offering used in Main
// At the moment only files that are accessible over a Static URL (HTTP) are accepted
// (possible alternatives: Arweave, GraphQL, IPFS, Smart Contract)
message Files{
    // File URL
    string url = 1;

    // !UNUSED!
    int32 indest = 2;

    // !UNUSED!
    string contentType = 3;

    // HTTP Method used to access the file 
    // example: 'GET'
    string method = 4;

    // Optional file index
    optional int32 index = 5;
}

// Algorithm that is allowed/trusted by the publisher to be used on asset used in Main
message Algorithm{
    // Decentralised identifier of the already published algorithm
    // example did:op:456
    string did = 1;

    // Hash of trusted algorithm's files
    // Can be created over Ocean Provider FileInfoEndpoint with parameter withChecksum = True
    // If the algorithm has multiple files, filesChecksum is a concatenated string of all files checksums
    string filesChecksum = 2;

    // Hash of algorithm's image details (entrypoint and image checksum)
    // Produced by: sha256(algorithm_ddo.metadata.algorithm.container.entrypoint + algorithm_ddo.metadata.algorithm.container.checksum)
    string containerSectionChecksum = 3;
}

// Information related to Gaia-X compliance used in AdditionalInformation
message gaiaX{
    // Identifier if the asset contains personally identifiable information
    bool containsPII = 1;

    // Terms and conditions additionally set by the publisher of the asset
    repeated Terms termsAndConditions = 2;

    // Gaia-X compliant Self-Description of the offering 
    ServiceSelfDescription serviceSD = 3;
}

// Enpoint to the VP of the offering used in gaiaX
message ServiceSelfDescription{
    // Static URL of the self-description
    string url = 1;

    // Optional identifier if the self-description has been verified against a Gaia-X Compliance Service
    // Mainly used by the deltaDAO portal
    optional bool isVerified = 2;
}

// Static URL to Terms and Conditions defined by the publisher of the asset used in gaiaX
message Terms{
    string url = 1;
}

// Response to CreateOfferingRequest
message CreateOfferingResponse {
    // did of the successfully published offering
    // example: did:op:123
    string did = 1;

    // Debug information
    google.protobuf.Struct DebugInformation = 3;
}

// Response to UpdateOfferingRequest
message UpdateOfferingResponse{
    optional string location = 4;
    google.protobuf.Struct DebugInformation = 3;
}

message UpdateOfferingLifecycleResponse{
    google.protobuf.Struct DebugInformation = 2;
}

service serviceofferingPublisher{
    rpc CreateOffering(CreateOfferingRequest) returns (CreateOfferingResponse){}
    rpc UpdateOffering(UpdateOfferingRequest) returns (UpdateOfferingResponse){}
    rpc UpdateOfferingLifecycle(UpdateOfferingLifecycleRequest) returns (UpdateOfferingLifecycleResponse){}
}